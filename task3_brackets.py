# Завдання 3 
# Напишіть програму, яка читає рядок з послідовністю символів-розділювачів
# ( ) { [ ] ( ) ( ) { } } }, і надає відповідне повідомлення, коли розділювачі симетричні, 
# несиметричні, або коли розділювачі різних видів стоять у парі.
# Використовуйте стек.


def is_symmetric(text: str) -> str:
    """Зберігаємо в стек відкривні дужки. Якщо в рядку зустрічається відповідна закривна дужка,
    видаляємо відкривну дужку. Якщо по завершенні циклу перебору всіх елементів вхідного рядка,
    стек порожній, то кількість відкривних дужок відповідає кількості відповідних закривних дужок.
    Щоб перевірити, чи закривна дужка не передує відкривній, дивимось, чи стек не порожній, коли 
    в циклі трапляється закривна дужка. Якщо стек порожній, перериваємо цикл, оскільки це означає, що послідовність
    дужок невірна.
    Виористовуємо булевий валідатор, який за умови проходження всіх перевірок має залишитись зі значенням
    True, коли цикл завершиться. Якщо хоча б одна з перевірок не проходить, присвоюємо валідатору значення False
    і виходимо із циклу."""
    validator = True
    open_brackets = "({["
    close_brackets = ")}]"
    stack = []
    for symbol in text:
        if symbol in open_brackets:
            stack.append(symbol)
        elif symbol in close_brackets:
            if len(stack) == 0:
                validator = False
                print("Несиметричні")
                break
            open_bracket = stack.pop()
            if open_bracket == "(" and symbol == ")":
                continue
            if open_bracket == "[" and symbol == "]":
                continue
            if open_bracket == "{" and symbol == "}":
                continue
            else:
                validator=False
                break
    if validator and len(stack)==0:
        return "Симетричні"
    return "Несиметричні"


text1 = "( ){[ 1 ]( 1 + 3 )( ){ }}" #Симетрично
text2 = "( 11 }" #Несиметрично
text3 = "( 23 ( 2 - 3)" #Несиметрично
text4 = "({34 + 7)}" # Несиметрично

print(is_symmetric(text1))
print(is_symmetric(text2))
print(is_symmetric(text3))
print(is_symmetric(text4))